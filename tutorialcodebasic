There are 3 way to use Panda
1. Write in python with vscode
2. Write in Jupyter notebook
3. Write in Collab Server


ch2 DataFrame Basic
===================
with jupyternotebook

createDF
-------
import panda as pd

df=pd.read_csv("file.csv")

wheather_data={
  'day':['1/1/2017','1/2/2017','1/3/2017'],
  'temp':[35,36,37],
  'wind':[5,6,7],
  'event':['snow','rain,'sunny']
}
df=pd.DataFram(whether_data)

row,comlumns=df.shape

see Row
----------
df.head(2)
df.tail(2)
df[2:5]

df[]
df[:]

See Column
---------
df.columns
df.day  =  df['day']
df.event   = df['column']

type(df['day'])

df[['day','event']]

Operator
--------
df['temp'].max()
df.describe()

condition
---------
df[df.temp>=33]
df[df.temp==df['temp'].max()]
df['day','temp'][df.temp=df['temp'].max()]

set index
---------
df.index
df.set_index('day',inplace=True)    mean change index of data tobe day
df.loc['1/1/2017']            mean to see at index='1/1/2017'
df.reset_index(inplace=True)    mean change index back to original


*********************************
ch3 create dataFrame
====================
import panda as pd
1)
df=pd.read_csv("\home\nikhom\weather_data.csv")
df=pd.read_excel("\home\nikhom\weather_data.csv")

2)
wheather_data={                 mean dictionay to show in ofject of key :Array of data
  'day':['1/1/2017','1/2/2017','1/3/2017'],
  'temp':[35,36,37],
  'wind':[5,6,7],
  'event':['snow','rain,'sunny']
}
df=pd.DataFrame(weather_data)    mean from dictionary

3)
or
wheather_data=[                 mean dictionary = array of object
  {'day':'1/1/2017','day':'1/2/2017','day':'1/3/2017'},
  {'temp':35,'temp':36,'temp':37},
  {'wind':5,'wind':6,'wind':7},
  {'event':'snow','event':'rain,'event':'sunny'}
]
df=pd.DataFrame(weather_data)    mean from dictionary

4)
weather_data=[                  tupple mean show data row by row
  ('1/1/2017',35,'snow'),
  ('1/2/2017',36,'rain'),
  ('1/3/2017',37,'sunny')
]
df=pd.DataFrame(weather_data,columns=["date","temp","wind","event"]

See more in https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html

****************************************************************
ch4 Read & Write csv,excel file
===============================
csv file is string with , as separator
ticket,eps,revenue,price,people
Googl,27.82,87,845,Lary Page
WMT,4.61,484,65,n.a
RIL,not available,50,1023,mukesh ambani
TATA,5.6,-1,n.a,ratan tata

import pandas as pd
df=pd.read_csv("stock_data.csv",header=1,nrows=3)   or skiprows=1 instead of header
 
    mean header index start from 0, 
    nrows=3 mean read only 3 row
    if no header on csv 
    header=None, names=["ticket","eps","revenue","price","people"]
    na_values=["not available","n.a."]  mean to replace these words with Nan
    na_values={                         mean to replace in each column
      'eps':["not available","n.a."],
      'revenue':["not available","n.a.",-1],
      'people':["not available","n.a."]
    }

writing csv
df.to_csv('new.csv') mean to write these csv file to folder
df.to_csv('new_no_index.csv',index=False) mean to write this csv file without index column
df.to_csv('new.csv',columns=['tickers','eps'],header=False) mean to write new.csv with 2 columns, without header

df=pd.read_excel("/home/nikhom/data/stock_data.exl","Sheet1") mean to load data

now we can use function with pada

def convert_people_cell(cell):
  if cell=="n.a."
    return 'sam walton'
  return cell

df=pd.read_excel("/home/nikom/data/stock_data.exel","Sheet1",coverters{
  'people':convert_people_cell
})

pd.to_excel('new.xls',sheet_name="stock",startrow=1,startcol=2,index=False)

Write 2 df in 1 exel, 2 sheets
------------------------------
with pd.ExcelWriter('stock_weather.xlsx') as writer:
  df_stock.to_excel(writer,sheet_name="stocks")
  df_weather.to_excel(writer,sheet_name="weather")

**********************************************
ch5 Missing data: fillna, dropna, interpolate
=============================================
import pandas as pd
df=pd.read_csv("weather_data.csv")
type(df.day[0]) mean to ready column day, row = 0 > str

df=pd.read_csv("weather_data.csv",parse_dates=["date"])
type(df.day[0]) mean timestamp

df.set_index('dat',inplace=True)

fillna
------
fillna with 0
new_df=df.fillna(0)   mean fill Nan with 0

fillna with 0 , 'no event'
new_df=df.fillna({
  'temp':0,
  'wind':0,
  'event':'no event'
})

new_df=df.fillna(method="ffill",axis="row",limit=1) mean to use n-1 value forward
     ,only 1 can forward, in row direction, 

new_df=df.fillna(method="bfill",axix="row",limit=1) mean to use n-1 value backward

new_df=df.interporate()  mean to use middel value 
new_df=df.interporate(method="time")  mean to use liniear calculation

new_df=df.dropna()    mean leave out row that contain Nan >= 1
new_df=df.dropna(how="all") mean leave out row when every column has NaN
new_df=df.dropna(thresh=1)   mean show the row that have value at least 1 value
new_df=df.dropna(thresh=2)   mean show the row that have value at least 2 value

insert row by estimation
dt=pd.date_range("01-01-2017","01-01-2017")  mean put date_range for estimation
idx=pd.DateTimeIndex(dt)                     mean estimate index of Date
new_df=df.reindex(idx)                   






